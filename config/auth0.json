{
    "servers": [
        {
            "name": "backend",
            "identifier": "https://backend",
            "allow_offline_access": false,
            "skip_consent_for_verifiable_first_party_clients": true,
            "token_lifetime": 86400,
            "token_lifetime_for_web": 7200,
            "signing_alg": "RS256"
        }
    ],
    "clients": [
        {
            "name": "client",
            "allowed_clients": [],
            "allowed_logout_urls": [],
            "callbacks": [
                "http://localhost:3000",
                "http://localhost:3000/callback",
                "http://localhost:3001",
                "https://accounts.google.com/gsi/client"
            ],
            "allowed_origins": [
                "http://localhost:3000"
            ],
            "client_aliases": [],
            "token_endpoint_auth_method": "client_secret_post",
            "app_type": "regular_web",
            "grant_types": [
                "authorization_code",
                "implicit",
                "refresh_token",
                "client_credentials",
                "password",
                "http://auth0.com/oauth/grant-type/password-realm",
                "http://auth0.com/oauth/grant-type/passwordless/otp",
                "http://auth0.com/oauth/grant-type/mfa-oob",
                "http://auth0.com/oauth/grant-type/mfa-otp",
                "http://auth0.com/oauth/grant-type/mfa-recovery-code"
            ],
            "web_origins": [
                "http://localhost:3000"
            ],
            "custom_login_page_on": true
        },
        {
            "name": "backend (Test Application)",
            "app_type": "non_interactive",
            "grant_types": [
                "client_credentials"
            ],
            "custom_login_page_on": true
        }
    ],
    "rules": [
        {
            "enabled": true,
            "script": "function enrichToken(user, context, callback) {\n  let accessTokenClaims = context.accessToken || {};\n  const assignedRoles = (context.authorization || {}).roles;\n  accessTokenClaims[`https://roles`] = assignedRoles;\n  user.user_metadata = user.user_metadata || {};\n  accessTokenClaims[`https://userId`] = user.user_metadata.id;\n  accessTokenClaims[`https://verified`] = user.email_verified;\n  context.accessToken = accessTokenClaims;\n  return callback(null, user, context);\n}",
            "name": "enrichToken",
            "order": 1
        }
    ]
}
